import java.awt.image.BufferedImage;

public class Ferryman implements Runnable{

    //用于表示横纵坐标
    private int x;
    private int y;
    //用于表示当前的状态
    private String status;
    //用于表示当前状态对应的图像
    private BufferedImage show = null;


    //定义一个background对象，用以获取障碍物信息
    private BackGround backGround = new BackGround();
    //用来实现ferryman的动作
    private Thread thread=null;
    //ferryman的移动速度
    private  int xSpeed;
    //ferryman的跳跃速度
    private  int ySpeed;
    //定义一个索引
    private int index=0;
    //表示ferryman是否可以上升
    private boolean up=false;
    public static int count=0;



    //判断ferryman是否死亡
    private boolean isDeath=false;
    public Ferryman(){

    }
    public Ferryman(int x,int y){
        this.x=x;
        this.y=y;
        show=StaticValue.stand_R;
        this.status="stand--right";
        thread=new Thread(this);
        thread.start();
    }
    //ferryman死亡方法
    public void death(){
        isDeath=true;
    }
    //ferryman向左移动
    public void leftMove(){
        //改变速度
        xSpeed=-5;
        //判断ferryman是否处于空中
        if(status.contains("jump")){
            status="jump--left";
        }else{
            status="move--left";
        }
    }

    //ferryman向右移动
    public void rightMove(){
        //改变速度
        xSpeed=5;
        //判断ferryman是否处于空中
        if(status.contains("jump")){
            status="jump--right";
        }else{
            status="move--right";
        }
    }

    //ferryman向左停止的方法
    public void leftStop(){
        xSpeed=0;
        if(status.contains("jump")){
            status="jump--left";
        }else{
            status="stop--left";
        }
    }

    //ferryman向右停止的方法
    public void rightStop(){
        xSpeed=0;
        if(status.contains("jump")){
            status="jump--right";
        }else{
            status="stop--right";
        }
    }
    //ferryman跳跃
    public void jump(){
        if (!status.contains("jump")){
            if(status.contains("left")){
                status="jump--left";
            }else{
                status="jump--right";
            }
            ySpeed=-10;
            up=true;

        }
    }
    //ferryman下落
    public void fall(){
        if(status.contains("left")){
            status="jump--left";
        }else{
            status="jump--right";
        }
        ySpeed=10;
        up=false;
    }
    public void run(){
        while(true){
            //判断是否处于障碍物上
            boolean onObstacle=false;
            //判断是否可以往右走
            boolean canRight=true;
            //判断是否可以往左走
            boolean canLeft=true;

            //遍历当前场景里所有的障碍物
            for(int i=0;i<backGround.getObstacleList().size();i++){
                Obstacle ob=backGround.getObstacleList().get(i) ;
                //判断ferryman是否位于障碍物上
                if((ob.getY()==this.y+50)&&(ob.getX()>this.x-70&&ob.getX()<this.x+50)){
                    onObstacle=true;
                }
                //判断是否跳起来顶到砖块
                if((ob.getY()>this.y-70&&ob.getY()<this.y-50)&&(ob.getX()>this.x-70&&ob.getX()<this.x+50)){
                    ySpeed=0;

                }
                //判断是否可以往右走
                if((ob.getX()==this.x+50)&&(ob.getY()>this.y-70&&ob.getY()<this.y+50)){
                    canRight=false;
                }
                //判断是否可以往左走
                if(ob.getX()==this.x-70&&(ob.getY()>this.y-70&&ob.getY()<this.y+50)){
                    canLeft=false;
                }
            }
            //判断ferryman是否碰到敌人死亡或踩死敌人
            for(int i=0;i<backGround.getEnemycatList().size();i++){
                EnemyCat eCat=backGround.getEnemycatList().get(i);
                if((eCat.getY()==this.y+50)&&(eCat.getX()>=this.x-50&&eCat.getX()<=this.x+50)){
                    eCat.death();
                }
                if((eCat.getX()<this.x+50&&eCat.getX()>this.x-50)&&(eCat.getY()<this.y+50&&eCat.getY()>this.y-50)){
                    death();
                }
            }
            for(int i=0;i<backGround.getEnemyghostList().size();i++){
                EnemyGhost eGhost=backGround.getEnemyghostList().get(i);
                if((eGhost.getX()<=this.x+50&&eGhost.getX()>=this.x-50)&&(eGhost.getY()<=this.y+50&&eGhost.getY()>=this.y-50)){
                    death();
                }
            }

            //进行ferryman跳跃的操作
            if(onObstacle && !up){
                ySpeed=0;
                if(status.contains("left")){
                    if(xSpeed!=0){
                        status="move--left";
                    }else{
                        status="stop--left";
                    }
                }else{
                    if(xSpeed!=0){
                        status="move--right";
                    }else{
                        status="stop--right";
                    }
                }
            }else{
                if(up){
                    if(count<8) {
                        y+=ySpeed;
                        count++;
                    }else {
                        up=false;
                        count=0;
                    }

                }else{
                    fall();
                    y+=ySpeed;
                    if(onObstacle)
                        ySpeed=0;
                }

            }

            if((canLeft && xSpeed<0)||(canRight&&xSpeed>0)){
                x+=xSpeed;
                //判断ferryman是否到了最左边
                if(x<0){
                    x=0;
                }
            }
            //判断当前是否是移动状态
            if(status.contains("move")){
                index=index==0?1:0;
            }
            //判断是否向左移动
            if("move--left".equals(status)){
                show=StaticValue.run_L.get(index);
            }
            //判断是否向右移动
            if("move--right".equals(status)){
                show=StaticValue.run_R.get(index);
            }
            //判断是否向左停止
            if("stop--left".equals(status)){
                show=StaticValue.stand_L;
            }
            //判断是否向右停止
            if("stop--right".equals(status)){
                show=StaticValue.stand_R;
            }
            //判断是否向左跳跃
            if("jump--left".equals(status)){
                show=StaticValue.jump_L;
            }
            //判断是否向右跳跃
            if("jump--right".equals(status)){
                show=StaticValue.jump_R;
            }
            try {
                Thread.sleep(30);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
    }


    public int getX() {
        return x;
    }

    public void setX(int x) {
        this.x = x;
    }

    public int getY() {
        return y;
    }

    public void setY(int y) {
        this.y = y;
    }

    public BufferedImage getShow() {
        return show;
    }

    public void setShow(BufferedImage show) {
        this.show = show;
    }
    public boolean isDeath() {
        return isDeath;
    }
    public void setBackGround(BackGround backGround) {
        this.backGround = backGround;
    }


}

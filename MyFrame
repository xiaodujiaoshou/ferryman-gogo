import javax.swing.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;
import java.awt.*;

public class MyFrame extends JFrame implements KeyListener,Runnable {
    //ferryman对象
    private Ferryman ferryman=new Ferryman();
    //定义一个线程对象，用于实现ferryman的运动
    private Thread thread=new Thread(this);
    //用于存储所有背景
    private List<BackGround> allBg = new ArrayList<>();
    //用于存储当前背景
    private BackGround nowBg = new BackGround();
    //用于双缓存
    private Image offScreenImage = null;

    public MyFrame() {
        //设置窗口大小为800*600
        this.setSize(800, 486);
        //设置窗口居中显示
        this.setLocationRelativeTo(null);
        //设置窗口的可见性
        this.setVisible(true);
        //设置点击窗口上的关闭键，结束程序
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //设置窗口大小不可变
        this.setResizable(false);
        //向窗口对象添加键盘监听器
        this.addKeyListener(this);
        //设置窗口名称
        this.setTitle("摆渡人闯关");
        //初始化图片
        StaticValue.init();
        //创建全部背景(2个：闯关和终点）
        for (int i = 1; i <= 2; i++) {
            allBg.add(new BackGround(i, i == 2));
        }
        //将第一个场景设置为当前场景
        nowBg = allBg.get(0);
        //绘制图像
        repaint();
        //初始化ferryman
        ferryman=new Ferryman(20,200);
        //设置当前场景
        nowBg=allBg.get(0);
        ferryman.setBackGround(nowBg);
        thread.start();
    }
    //重写paint方法
    public void paint(Graphics g) {
        if (offScreenImage==null) {
            offScreenImage=createImage(800,600);
        }
        Graphics graphics=offScreenImage.getGraphics();
        graphics.fillRect(0,0,800,600);
        //绘制背景
        graphics.drawImage(nowBg.getBgImage(),0,0,this);
        //绘制障碍物
        for (Obstacle ob : nowBg.getObstacleList()) {
            graphics.drawImage(ob.getShow(), ob.getX(), ob.getY(), this);
        }
        //绘制猫咪敌人
        for (EnemyCat e : nowBg.getEnemycatList()) {
            graphics.drawImage(e.getShow(), e.getX(), e.getY(), this);
        }
        //绘制幽灵敌人
        for (EnemyGhost e : nowBg.getEnemyghostList()) {
            graphics.drawImage(e.getShow(), e.getX(), e.getY(), this);
        }
        //重写的paint方法中，绘制ferryman
        graphics.drawImage(ferryman.getShow(),ferryman.getX(),ferryman.getY(),this);
        //将图像绘制到窗口中
        g.drawImage(offScreenImage,0,0,this);
    }


    @Override
   public void keyTyped(KeyEvent e) {

    }




    //当键盘按下按键时调用
    public void keyPressed(KeyEvent e){
        //向右移动
        if(e.getKeyCode()==39){
            ferryman.rightMove();
        }
        //向左移动
        if(e.getKeyCode()==37){
            ferryman.leftMove();
        }
        //跳跃
        if(e.getKeyCode()==38) {
            ferryman.jump();
        }

    }

    //当键盘松开按键时调用
    public void keyReleased(KeyEvent e){
        //向左停止
        if(e.getKeyCode()==37){
            ferryman.leftStop();
        }
        //向右停止
        if(e.getKeyCode()==39){
            ferryman.rightStop();
        }
    }

    @Override

    public void run() {
        while(true){
            repaint();
            try {
                Thread.sleep(50);
                if(ferryman.getX()>=775) {
                    nowBg=allBg.get(1);
                    ferryman.setBackGround(nowBg);

                    for(int i=0;i<nowBg.getEnemycatList().size();i++){
                        nowBg.getEnemycatList().remove(i);
                    }
                    for(int i=0;i<nowBg.getEnemyghostList().size();i++){
                        nowBg.getEnemyghostList().remove(i);
                    }

                }
                //判断ferryman是否死亡
                if(ferryman.isDeath()){
                    JOptionPane.showMessageDialog(this,"摆渡人死亡!!!");
                    System.exit(0);
                }
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
    }

    public static void main(String[] args) {
        new Story();
    }


}
